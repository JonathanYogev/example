name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: il-central-1
  ECR_SERVER_REPO: 370924438764.dkr.ecr.il-central-1.amazonaws.com/practice-project-server
  ECR_CLIENT_REPO: 370924438764.dkr.ecr.il-central-1.amazonaws.com/practice-project-client
  EKS_CLUSTER_NAME: practice-cluster
  KUBECTL_VERSION: '1.29' # Using a compatible version available in setup-kubectl action
  HELM_VERSION: 'v3.14.0' # Updated to a more recent stable version
  IMAGE_TAG: ${{ github.sha }} # Use commit SHA for tagging

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Server Dependencies
        run: cd server && npm install

      - name: Run Server Tests
        run: cd server && npm test

      - name: Install Client Dependencies
        run: cd client && npm install

      - name: Run Client Tests
        run: cd client && npm test

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Server Docker image
        run: |
          docker build -t server-image ./server
          docker tag server-image:latest ${{ env.ECR_SERVER_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_SERVER_REPO }}:${{ env.IMAGE_TAG }}

      - name: Build and push Client Docker image
        run: |
          docker build -t client-image ./client
          docker tag client-image:latest ${{ env.ECR_CLIENT_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_CLIENT_REPO }}:${{ env.IMAGE_TAG }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: # Will be set by Ingress later
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Helm Lint Server Chart
        run: helm lint ./charts/server-chart

      - name: Helm Template Server Chart
        run: helm template staging-server ./charts/server-chart --namespace staging --set image.tag=${{ env.IMAGE_TAG }}

      - name: Helm Lint Client Chart
        run: helm lint ./charts/client-chart

      - name: Helm Template Client Chart
        run: helm template staging-client ./charts/client-chart --namespace staging --set serverUrl=http://staging-server-server-chart:3001,image.tag=${{ env.IMAGE_TAG }}

      - name: Deploy Server to Staging
        run: helm upgrade --install staging-server ./charts/server-chart --namespace staging --set image.tag=${{ env.IMAGE_TAG }} --wait

      - name: Deploy Client to Staging
        run: helm upgrade --install staging-client ./charts/client-chart --namespace staging --set serverUrl=http://staging-server-server-chart:3001,image.tag=${{ env.IMAGE_TAG }} --wait